{"version":3,"sources":["components/result/result.component.jsx","components/keypad/keypad.component.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Result","result","className","KeyPad","onClick","name","type","App","state","bind","calculate","reset","e","value","target","this","setState","safeEval","error","alert","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oUAceA,G,MAZA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAKjB,MAJc,KAAXA,IACFA,EAAS,GAIT,yBAAKC,UAAU,UACd,8BAAOD,MCgDKE,EAvDA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACd,yBAAKF,UAAU,UACd,4BAAQG,KAAK,QAAQC,KAAK,SAASF,QAASA,GAA5C,KACA,4BACCC,KAAK,IACLC,KAAK,SACLJ,UAAU,WACVE,QAASA,GAJV,KAQA,4BACCC,KAAK,IACLC,KAAK,SACLJ,UAAU,WACVE,QAASA,GAJV,KAQA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BACCC,KAAK,IACLC,KAAK,SACLJ,UAAU,WACVE,QAASA,GAJV,KAQA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BACCC,KAAK,IACLC,KAAK,SACLJ,UAAU,WACVE,QAASA,GAJV,KAQA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BAAQC,KAAK,IAAIC,KAAK,SAASF,QAASA,GAAxC,KACA,4BACCC,KAAK,IACLC,KAAK,SACLJ,UAAU,WACVE,QAASA,GAJV,OCkBaG,E,YAvDb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXP,OAAQ,IAGV,EAAKG,QAAU,EAAKA,QAAQK,KAAb,gBACf,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBATD,E,qEAYNG,GACN,IAAMC,EAAQD,EAAEE,OAAOT,KAEV,UAAVQ,EACDE,KAAKJ,QAEW,MAAVE,EACNE,KAAKL,YAGLK,KAAKC,SAAS,CAAEf,OAAQc,KAAKP,MAAMP,OAASY,M,kCAQ9C,IACEE,KAAKC,SAAS,CACZf,OAAQgB,IAASF,KAAKP,MAAMP,UAE9B,MAAOiB,GACPH,KAAKC,SAAS,CAAEf,OAAQ,KACxBkB,MAAM,Y,8BAKRJ,KAAKC,SAAS,CAAEf,OAAQ,O,+BAGhB,IACAA,EAAWc,KAAKP,MAAhBP,OACR,OACE,yBAAKC,UAAU,oBACb,kBAAC,EAAD,CAAQD,OAAQA,IAChB,kBAAC,EAAD,CAAQG,QAASW,KAAKX,e,GAlDZgB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlB,GACLmB,QAAQnB,MAAMA,EAAMoB,c","file":"static/js/main.b12fbc6d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Result = ({ result }) => {\r\n\tif(result === \"\") {\r\n\t\tresult = 0;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"result\">\r\n\t\t\t<span>{result}</span>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\n  \r\nconst KeyPad = ({ onClick }) => (\r\n\t<div className=\"keypad\">\r\n\t\t<button name=\"clear\" type=\"button\" onClick={onClick}>C</button>\r\n\t\t<button \r\n\t\t\tname=\"*\" \r\n\t\t\ttype=\"button\" \r\n\t\t\tclassName=\"operator\"\r\n\t\t\tonClick={onClick}\r\n\t\t>\r\n\t\t\t*\r\n\t\t</button>\r\n\t\t<button \r\n\t\t\tname=\"/\" \r\n\t\t\ttype=\"button\" \r\n\t\t\tclassName=\"operator\"\r\n\t\t\tonClick={onClick}\r\n\t\t>\r\n\t\t\t/\r\n\t\t</button>\r\n\t\t<button name=\"1\" type=\"button\" onClick={onClick}>1</button>\r\n\t\t<button name=\"2\" type=\"button\" onClick={onClick}>2</button>\r\n\t\t<button name=\"3\" type=\"button\" onClick={onClick}>3</button>\r\n\t\t<button \r\n\t\t\tname=\"+\" \r\n\t\t\ttype=\"button\" \r\n\t\t\tclassName=\"operator\"\r\n\t\t\tonClick={onClick}\r\n\t\t>\r\n\t\t\t+\r\n\t\t</button>\r\n\t\t<button name=\"4\" type=\"button\" onClick={onClick}>4</button>\r\n\t\t<button name=\"5\" type=\"button\" onClick={onClick}>5</button>\r\n\t\t<button name=\"6\" type=\"button\" onClick={onClick}>6</button>\r\n\t\t<button \r\n\t\t\tname=\"-\" \r\n\t\t\ttype=\"button\" \r\n\t\t\tclassName=\"operator\"\r\n\t\t\tonClick={onClick}\r\n\t\t>\r\n\t\t\t-\r\n\t\t</button>\r\n\t\t<button name=\"7\" type=\"button\" onClick={onClick}>7</button>\r\n\t\t<button name=\"8\" type=\"button\" onClick={onClick}>8</button>\r\n\t\t<button name=\"9\" type=\"button\" onClick={onClick}>9</button>\r\n\t\t<button \r\n\t\t\tname=\"=\" \r\n\t\t\ttype=\"button\" \r\n\t\t\tclassName=\"operator\"\r\n\t\t\tonClick={onClick}\r\n\t\t>\r\n\t\t\t=\r\n\t\t</button>\r\n\t</div>\r\n);\r\n\r\nexport default KeyPad;","import React, { Component } from 'react';\nimport safeEval from 'safe-eval';\n\nimport './App.scss';\n\nimport Result from '../components/result/result.component';\nimport KeyPad from '../components/keypad/keypad.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      result: \"\"\n    }\n\n    this.onClick = this.onClick.bind(this);\n    this.calculate = this.calculate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  onClick(e) {\n    const value = e.target.name;\n\n    if(value === \"clear\") {\n      this.reset();\n    } \n    else if(value === \"=\") {\n      this.calculate();\n    }\n    else {\n      this.setState({ result: this.state.result + value });\n    }\n  }\n\n  calculate() {\n    /*\n      Throws error when the value of \"result\" is not an expression.\n    */\n    try {\n      this.setState({\n        result: safeEval(this.state.result),\n      });\n    } catch (error) {\n      this.setState({ result: \"\" });\n      alert(\"Error\");\n    }\n  }\n\n  reset() {\n    this.setState({ result: \"\" });\n  }\n\n  render() {\n    const { result } = this.state;\n    return (\n      <div className=\"react-calculator\">\n        <Result result={result} />\n        <KeyPad onClick={this.onClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}